ログアウト機能をビューに実装
※method: :DELETEとメソッドの指定が漏れるとエラーになる
<%= link_to "ログアウト", destroy_user_session_path, method: :DELETE, class: 'btn'%>

バリデーションする
validates :name, presence: true








User.create(name: "hoge", email: "example@fuga.com", password: "123456", password_confirmation:"123456")
User.create(name: "hoge", email: "example@fuga.com", password: "123456", password_confirmation: "123456")






1. アプリケーションの新規作成手順

  Railsアプリケーションの新規作成
    アプリケーションを作成したいディレクトリに移動する
      rails _6.0.0_ new TECH_CHAT -d mysql

  データベースの作成
    「rails db:create」
    Sequel Proで作成できたかを確認
    「rails s」でサーバーを起動
    ブラウザで「http://localhost:3000」にアクセス


2. 質問の投稿機能を実装

①一覧機能（indexアクション）を実装する手順

  コントローラーの作成
    「rails g controller questions」
  
  コントローラーの設定
    「app/controllers/posts_controller.rb」に以下のように記述して「index」アクションを定義

      def index
        @questions = Question.all
      end

  ルーティングの設定
    「config/routes.rb」ファイルに以下を記述
    「resources :questions, only: [:index]

  モデルの作成
    「rails g model question」でQuestionモデルを作成
    「db/migrate/20XXXXXXXXXXXX_create_posts.rb」が作成されていることを確認
    マイグレーションファイルを編集（テーブルにカラムを追加する）
      今回は「def change ~ end」内を以下のように追記
      
        def change
          create_table :questions do |t|
            t.string :title
            t.text :content
            t.string :name
            t.timestamps
          end
        end

    「rails db:migrate」でデータベースに反映
    「posts」テーブルが作成され、「content」カラムが追加されていることを確認
    
        ※「rails db:migrate:status」でマイグレーションの状況を確認できる

  ビューの作成
  CSSファイルを作成

②投稿画面（newアクション）を作成する手順
  コントローラーの設定
    「app/controllers/posts_controller.rb」に以下を追記

        def new
        end
  
  ルーティングの設定
    「config/routes.rb」に「:new」を追記

  ビューの作成


③保存機能（createアクション）を実装する手順
  コントローラーの設定

        def create
          Question.create(question_params)
          redirect_to action: :index
        end

        private
        def question_params
          params.require(:question).permit(:title, :content, :name)
        end

  ルーティングの設定
    「config/routes.rb」に「:create」を追記

  ビューの作成
    root_pathに戻るので作成不要

3. 回答機能を実装
  モデルの作成
    「rails g model answer」でAnswerモデルを作成

  テーブルの作成
        def change
          create_table :questions do |t|
            t.text :content
            t.string :name
            t.timestamps
            t.integer :question_id
          end
        end

  モデルの設定
    「answer.rb」 「belongs_to :question」
    「question.rb」 「has_many :answers」
    ※コロン：をモデル名の頭につけること
    ※answersと複数にすること

  questionsコントローラーの設定
    showアクションを定義
        def show
        end

  answersコントローラーの作成
      「rails g controller answers」
          def show
          end
        ※ここは画面を表示するだけなので何も書かず
        ただし、どの質問なのか？idをパラメーターとしてindesから受け取っているので、それをshowにも渡さなければならない
        そこで、set_questionという Actionをbefore_actionで定義。paramsのidを受け取ってQuestionモデルのインスタンスをセット。
        ビューファイルに引き渡す。↓

        before_action :set_question, only: [:show]

        def set_question
          @question = Question.find(params[:id])
        end
  ルーティングの設定
  「config/routes.rb」に「:show」を追記